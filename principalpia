• Almacena objetos en una lista, y las muestras de diferentes maneras.

Se pide importar la clase Contacto, que está definida en definirclase.py
de la importación definirlas Contacto
• Se importa una clase que permite que se apoderen de un objeto
del operador import attrgetter

• Función para mostrar los elementos que tiene la lisa de ejemplo.
def CuantosElementosHay():
    txt á "El número de elementos de la colección es"
    imprimir(txt. formato(len(Contactos)))

def BuscarTelefono(telabuscar):
    coincidencia-Falso
    para contactos en Contactos:
        si (contacto. telefonotelabuscar):
            coincidencia-Verdadero
            Romper
    retorno coincidencia

def BuscarContacto(telabuscar):
    contador-1
    indice_retorno-1
    para contactos en Contactos:
        contador+o1
        si (contacto. telefonotelabuscar):
            indice_retornode contador
            Romper
    volver indice_retorno

Se declara una lista que objetos. Inicia elementos de pecado.
Muestra los elementos de la lista.
Contactos = []
CuantosElementosHay()

Se agregan varios objetos a la lista.
Contactos. anexar(1234567890,"Felipe Ramírez","feli.rmz@hotmail.com"))
CuantosElementosHay()

Se agregan más elementos a la lista.
Contactos. anexar(1134567890,"Franco Leal","feleal@hotmail.com" ))
Contactos. anexar(1114567890,"María Medeiros","mmedeiros@hotmail.com"))
Contactos. anexar(1111567890,"Olga Guerrero","guerroolga@gmail.com" ))
CuantosElementosHay()

• Barrido de Código.
para contactos en Contactos:
    Impresión("------------------------------------------")
    impresión(contacto. telefono)
    impresión(contacto. nombre)
    impresión(contacto. correo)
    impresión(contacto. registro)
    impresión(contacto. UIValido)

• Ordenamiento.
Contactos. ordenar(clave-attrgetter("telefono"),invertir-Falso)

impresión("Ordenado")
• Barrido de Código.
para contactos en Contactos:
    Impresión("------------------------------------------")
    impresión(contacto. telefono)
    impresión(contacto. nombre)
    impresión(contacto. correo)
    impresión(contacto. registro)
    impresión(contacto. UIValido)

Búsqueda de elementos, usando la función de búsqueda.
Retorna falso o verdadero, dependendiendo su se encontró
No, no.
impresión(BuscarTelefono(1234567890))
impresión(BuscarTelefono(9999999999))

Búsqueda de objeto y retorno índice de, usando función de
Búsqueda.
impresión(BuscarContacto(1234567890))
impresión(BuscarContacto(9999999999))
Uso del índice recuperado
indice_obtenidoDeBuscarContacto(1234567890)
si indice_obtenido-1:
    impresión("No se encontró el objeto")
el más:
    (Contactos[indice_obtenido]. telefono)
    (Contactos[indice_obtenido]. nombre)
    (Contactos[indice_obtenido]. correo)

indice_obtenidoDeCorreoS,BuscarContacto(9999999999)
si indice_obtenido-1:
    impresión("No se encontró el objeto")
el más:
    (Contactos[indice_obtenido]. telefono)
    (Contactos[indice_obtenido]. nombre)
    (Contactos[indice_obtenido]. correo)
    
    
    
    Módulo para poder ejecutar tareas directas en el sistema operativo.
importación os
Módulo para trabajar con expresione regulares
importación re

Se establece una función para borrar pantalla.
• Se usa, lambda expresión, que es suabisód:
• def clear():
• os.system('cls')
LimpiarPantalla á lambda: os. ('cls' ) #on sistema Windows

• El Serr de expresiones regulares
_txt es el texto a vlidar.
• _regex es el patrón de expresión regular a validar.
Retorna True si _txt cumple con el patrón en definido _regex
Retrona False si no es así.
def RegEx(_txt,_regex):
    coincidenciaáre. partido(_regex, _txt)
    devolver bool(coincidencia)

def principal():
    mientras que (Verdadero):
        LimpiarPantalla()
        impresión("LISTA DE COTACTOS")
        Impresión(" ")
        impresión("[1] Agregar un contacto.")
        impresión("[2] Buscar un contacto.")
        impresión("[3] Eliminar un contacto.")
        impresión("[4] Contactos Mostrar.")
        impresión("[5] Datos serializadores.")
        impresión("[0] Salir.")
        opcion_elegida de entrada de la entrada ("¿Qué deseahacer? > ")
        si RegEx(opcion_elegida,"[123450]{1}$"):
            si opcion_elegida"0":
                impresión("GRACIAS POR UTILIZAR EL PROGRAMA")
                Romper
            si opcion_elegida"1":
                impresión("Llamar procedimiento para la acción")
            si opcion_elegida"2":
                impresión("Llamar procedimiento para la acción")
            si opcion_elegida"3":
                impresión("Llamar procedimiento para la acción")
            si opcion_elegida"4":
                impresión("Llamar procedimiento para la acción")
            si opcion_elegida"5":
                impresión("Llamar procedimiento para la acción")

            entrada("Pulsa enter para contunuar...")
        el más:
            impresión("Esa respuesta no es válida.")
            entrada("Pulsa enter para contunuar...")

principal()

Se que codificar un procedimiento adecuado, en cada una de
• Las opciones válidas.
© 2020 GitHub, Inc.
